import{_ as t,c as C,o as a,j as e}from"./chunks/framework.Dce3_-kh.js";const T=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"说明书/背景技术.md","filePath":"说明书/背景技术.md"}'),o={name:"说明书/背景技术.md"};function n(r,B,s,c,l,p){return a(),C("div",null,B[0]||(B[0]=[e("p",null,"与当前广泛使用的拥塞控制算法CUBIC协议不同，BBR v1协议不再以丢包作为唯一拥塞信号，而是通过实时测量最大传输速率和最小RTT，以计算链路的BDP带宽时延积，进而调整拥塞窗口。对比传统的以丢包作为拥塞信号的算法，BBR没有传统的慢启动阶段，可以提高吞吐量，并减少队列堆积，进而降低数据包排队时延。然而BBR也存在明显缺陷。BBR有时存在较高的带宽估计，倾向于抢占CUBIC等算法的带宽，导致多流环境下BBR的公平性较差；并且，BBR在数据中心网络，无线网络等网络环境下表现较差，导致数据包丢失率和重传率提高。主要的，BBR算法的核心参数，例如CWND增益、最小RTT探测周期都是静态配置，对于链路状态突发改变的响应相对滞后，网络突发拥塞时，BBR难以及时收敛到合适的发送速率，缺少针对实时链路状态的自适应参数优化方法。",-1),e("p",null,"DCTCP协议作为针对数据中心网络设计的拥塞控制算法，交换机会实时测量瞬时队列长度，瞬时队列长度超过阈值时，交换机会在数据包的IP头中设置CE标记，表示拥塞经历。接收端收到有CE标记的数据包后，通过在ACK的IP头中设置ECN-Echo标记，将拥塞信息反馈给发送端。对比传统的CUBIC，DCTCP计算每个RTT中收到的接收端返回的ACK中携带ECN-Echo标记的比例，用于对拥塞窗口进行细粒度调整，而非简单地加倍或减半，以快速响应链路状态的突发改变。然而DCTCP不具备主动探测链路的瓶颈带宽的机制，限制了DCTCP在复杂网络环境中的表现。",-1),e("p",null,"综上所述，现有拥塞控制算法在面对高动态的网络环境时存在诸多不足，通过在发送端的BBR状态机中嵌入强化学习模型，结合离线学习和在线学习进行模型训练，发送端发送前可以使用对应网络环境下的预训练参数，发送时可以根据实时链路状态在线学习并动态生成参数调整策略。同时计算每个RTT中收到的接收端返回的ACK中携带ECN-Echo标记的比例，该比例一方面参考DCTCP对拥塞窗口进行细粒度调整，另一方面作为强化学习模型的输入之一，进一步增强BBR对链路状态的实时感知能力和快速拥塞响应能力。",-1)]))}const _=t(o,[["render",n]]);export{T as __pageData,_ as default};
